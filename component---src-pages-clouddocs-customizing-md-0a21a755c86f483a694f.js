"use strict";(self.webpackChunkacd_containers=self.webpackChunkacd_containers||[]).push([[5102],{3624:function(e,t,a){a.d(t,{Z:function(){return v}});var r=a(7294),n=a(8650),i=a.n(n),o=a(1597),l=a(1931),s=a(9514),d=a(5900),c=a.n(d),p=function(e){var t,a=e.title,n=e.theme,i=e.tabs,o=void 0===i?[]:i;return r.createElement("div",{className:c()("PageHeader-module--page-header--NqfPe",(t={},t["PageHeader-module--with-tabs--vbQ-W"]=o.length,t["PageHeader-module--dark-mode--WCeH8"]="dark"===n,t))},r.createElement("div",{className:"bx--grid"},r.createElement("div",{className:"bx--row"},r.createElement("div",{className:"bx--col-lg-12"},r.createElement("h1",{id:"page-title",className:"PageHeader-module--text--Er2EO"},a)))))},u=function(e){var t=e.relativePagePath,a=e.repository,n=(0,o.useStaticQuery)("1364590287").site.siteMetadata.repository,i=a||n,l=i.baseUrl,s=i.subDirectory,d=l+"/edit/"+i.branch+s+"/src/pages"+t;return l?r.createElement("div",{className:"bx--row EditLink-module--row--BEmSX"},r.createElement("div",{className:"bx--col"},r.createElement("a",{className:"EditLink-module--link--IDrl1",href:d},"Edit this page on GitHub"))):null},m=a(4703),g=a(1721),h=function(e){function t(){return e.apply(this,arguments)||this}return(0,g.Z)(t,e),t.prototype.render=function(){var e=this.props,t=e.title,a=e.tabs,n=e.slug,l=n.split("/").filter(Boolean).slice(-1)[0],s=a.map((function(e){var t,a=i()(e,{lower:!0,strict:!0}),s=a===l,d=new RegExp(l+"/?(#.*)?$"),p=n.replace(d,a);return r.createElement("li",{key:e,className:c()((t={},t["PageTabs-module--selected-item--aBB0K"]=s,t),"PageTabs-module--list-item--024o6")},r.createElement(o.Link,{className:"PageTabs-module--link--Kz-7R",to:""+p},e))}));return r.createElement("div",{className:"PageTabs-module--tabs-container--Cdfzw"},r.createElement("div",{className:"bx--grid"},r.createElement("div",{className:"bx--row"},r.createElement("div",{className:"bx--col-lg-12 bx--col-no-gutter"},r.createElement("nav",{"aria-label":t},r.createElement("ul",{className:"PageTabs-module--list--xLqxG"},s))))))},t}(r.Component),f=h,k=a(7296),x=a(5387),y=a(3732),N=function(e){var t=e.date,a=new Date(t);return t?r.createElement(y.X2,{className:"last-modified-date-module--row--XJoYQ"},r.createElement(y.sg,null,r.createElement("div",{className:"last-modified-date-module--text--ogPQF"},"Page last updated: ",a.toLocaleDateString("en-GB",{day:"2-digit",year:"numeric",month:"long"})))):null},v=function(e){var t=e.pageContext,a=e.children,n=e.location,d=e.Title,c=t.frontmatter,g=void 0===c?{}:c,h=t.relativePagePath,y=t.titleType,v=g.tabs,b=g.title,T=g.theme,P=g.description,w=g.keywords,C=g.date,E=(0,x.Z)().interiorTheme,A=(0,o.useStaticQuery)("2456312558").site.pathPrefix,I=A?n.pathname.replace(A,""):n.pathname,_=v?I.split("/").filter(Boolean).slice(-1)[0]||i()(v[0],{lower:!0}):"",z=T||E;return r.createElement(s.Z,{tabs:v,homepage:!1,theme:z,pageTitle:b,pageDescription:P,pageKeywords:w,titleType:y},r.createElement(p,{title:d?r.createElement(d,null):b,label:"label",tabs:v,theme:z}),v&&r.createElement(f,{title:b,slug:I,tabs:v,currentTab:_}),r.createElement(k.Z,{padded:!0},a,r.createElement(u,{relativePagePath:h}),r.createElement(N,{date:C})),r.createElement(m.Z,{pageContext:t,location:n,slug:I,tabs:v,currentTab:_}),r.createElement(l.Z,null))}},2435:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return l},default:function(){return c}});var r=a(3366),n=(a(7294),a(4983)),i=a(3624),o=["components"],l={},s={_frontmatter:l},d=i.Z;function c(e){var t=e.components,a=(0,r.Z)(e,o);return(0,n.kt)(d,Object.assign({},s,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"The Annotator for Clinical Data Configuration Editor supports extensive customization of the annotators as well as the ability to preview the customizations and export them in the form of a cartridge (zip file) that can be deployed directly to the service via the ",(0,n.kt)("inlineCode",{parentName:"p"},"/cartridges")," APIs."),(0,n.kt)("p",null,"The configuration editor facilitates the following customizations:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Customization"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Dictionaries"),(0,n.kt)("td",{parentName:"tr",align:null},"A set of terms describing a unique concept that is matched against the provided text to be analyzed.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Derived Concepts"),(0,n.kt)("td",{parentName:"tr",align:null},"Rules for deriving concepts when one or more other concepts or tokens appears in the surrounding context.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Filters"),(0,n.kt)("td",{parentName:"tr",align:null},"Conditional rules for omitting undesired annotations from the service response.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Clinical Attributes"),(0,n.kt)("td",{parentName:"tr",align:null},"Configurable annotations built upon one or more other annotations. Optionally, semantically linked values in the surrounding context can be captured and associated with the attribute.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Derived Clincal Attributes"),(0,n.kt)("td",{parentName:"tr",align:null},"Conditional logic and expressions for deriving new attributes based on values associated with other attributes.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Attribute Qualifiers"),(0,n.kt)("td",{parentName:"tr",align:null},"Configurations for detecting qualifying terms in the immediate context of an attribute and capturing the qualifiers as a field within the output attribute annotation.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Ontological Relations"),(0,n.kt)("td",{parentName:"tr",align:null},"Ontology configurations for extracting ontological relations between concepts cooccurring within the same sentence.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"CPT Code Mapping"),(0,n.kt)("td",{parentName:"tr",align:null},"Mapping configurations for outputting CPT codes from the concept and procedure annotators.")))),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"Table 1. Customizations facilitated by the configuaration editor")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.ibm.com/account/reg/us-en/signup?formid=MAIL-watsonhealthna"},"Contact your IBM representative")," to learn more about leveraging the configuration editor to customize the behavior of the service."),(0,n.kt)("h2",null,"Cartridge Deployment"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"The consumer uses the IBM Clinical Data Annotator Configuration Editor to create a new cartridge (or modify an existing one) and customizes the contents (artifacts) of the cartridge to their domain. After that, the consumer will ",(0,n.kt)("strong",{parentName:"p"},"Export")," the cartridge in order to save a snapshot of the cartridge.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"The consumer deploys the cartridge snapshot (a zip file) to  IBM Clinical Data Annotator using ",(0,n.kt)("em",{parentName:"p"},"POST /v1/cartridges")," API. A successful request for creating a cartridge will return with HTTP ",(0,n.kt)("q",null,"202 ACCEPTED")," response code and will include the path to the resource, e.g., /v1/cartridges/cartridgeId in the response body and the response header. The resource path can be used in ",(0,n.kt)("em",{parentName:"p"},"GET /v1/cartridges/cartridgeId")," API to obtain the overall deployment status. In the following curl example, the consumer’s cartridge file is ",(0,n.kt)("inlineCode",{parentName:"p"},"/path/to/name_of_cartridge_file.zip"),"."))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-Curl"},'\n curl -X POST --header "Authorization: Bearer xxxxxxxxxxxxxxx" \\\n  --header "Accept:application/json" \\\n --header "Content-Type:application/octet-stream" \\\n --data-binary @/path/to/name_of_cartridge_file.zip \\\n "<route_host>/v1/cartridges?version=2019-09-01"\n\n')),(0,n.kt)("p",null,"Use the ",(0,n.kt)("em",{parentName:"p"},"POST /v1/cartridges")," operation for the initial deployment of a cartridge version and ",(0,n.kt)("em",{parentName:"p"},"PUT /v1/cartridges")," to redploy cartridge updates. Different published versions of a cartridge (e.g. cartridge_v1.0, cartridge_v2.0) will need to be initially deployed via the POST operation and subsequently redeployed via the PUT operation."),(0,n.kt)("ol",{start:3},(0,n.kt)("li",{parentName:"ol"},"The consumer redeploys a previously deployed cartridge version using the ",(0,n.kt)("em",{parentName:"li"},"PUT /v1/cartridges")," API. The cartridges id is extracted directly from the cartridge zip file. A successful request for updating the cartridge (re)deployment will result in a HTTP ",(0,n.kt)("q",null,"202 ACCEPTED")," response code and will include the path to the resource, e.g., /v1/cartridges/cartridgeId in the response body and the response header.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-Curl"},'\n curl -X PUT --header "Authorization: Bearer xxxxxxxxxxxxxxx" \\\n --header "Accept:application/json" \\\n --header "Content-Type:application/octet-stream" \\\n --data-binary @/path/to/name_of_cartridge_file.zip \\\n "<route_host>/v1/cartridges?version=2019-09-01"\n\n')),(0,n.kt)("ol",{start:4},(0,n.kt)("li",{parentName:"ol"},"The consumer retrieves a list of deployed cartridges for a given tenant using the ",(0,n.kt)("em",{parentName:"li"},"GET /v1/cartridges")," API. An empty list is returned if no cartridges have been deployed.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-Curl"},'\n curl -X GET --header "Authorization: Bearer xxxxxxxxxxxxxxx" \\\n --header "Accept:application/json" \\\n "<route_host>/v1/cartridges?version=2019-09-01"\n\n')),(0,n.kt)("ol",{start:5},(0,n.kt)("li",{parentName:"ol"},"The consumer can view the status of a specific cartridge deployment by invoking the ",(0,n.kt)("em",{parentName:"li"},"GET /v1/cartridges/{id}")," API with the cartridge ID supplied as a path parameter. If the supplied ID does not exists, then a HTTP  ",(0,n.kt)("q",null," 404 Not Found ")," response code is returned. The following curl command returns the deployment status of the ",(0,n.kt)("q",null,"cartridge_id"),".")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-Curl"},'\n curl -X GET --header "Authorization: Bearer xxxxxxxxxxxxxxx" \\\n --header "Accept:application/json" \\\n "<route_host>/v1/cartridges/cartridge_id?version=2019-09-01"\n\n')),(0,n.kt)("p",null,"The ",(0,n.kt)("em",{parentName:"p"},"/v1/cartridges")," API is the recommended way for a cartridge deployment and is compatible with the legacy ",(0,n.kt)("em",{parentName:"p"},"/v1/deploy")," API. In many situations, the consumer has already deployed a cartridge using the ",(0,n.kt)("em",{parentName:"p"},"/v1/deploy")," API and the consumer can immediately update the same cartridge using the above POST and PUT operations on the ",(0,n.kt)("em",{parentName:"p"},"/v1/cartridges")," API to initially create and to subsequently update the cartridge deployment.\nA typical ",(0,n.kt)("em",{parentName:"p"},"POST /v1/cartridges")," operation creates and initializes a deployment for cartridge that has never been deployed to the system. For cartridges that have been previously deployed with the ",(0,n.kt)("em",{parentName:"p"},"/v1/deploy")," API, the ",(0,n.kt)("em",{parentName:"p"},"POST /v1/cartridges")," API will create, initialize, and update an existing cartridge deployment. Subsequent redeployments of a cartridge must use the ",(0,n.kt)("em",{parentName:"p"},"PUT /v1/cartridges")," API."),(0,n.kt)("h2",null,"Legacy Cartridge Deployment"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The consumer uses the IBM Clinical Data Annotator Configuration Editor to create a new cartridge (or modify an existing one) and customizes the contents (artifacts) of the cartridge to their domain. After that, the consumer will ",(0,n.kt)("strong",{parentName:"li"},"Export")," the cartridge in order to save a snapshot of the cartridge."),(0,n.kt)("li",{parentName:"ol"},"The consumer deploys the cartridge snapshot (a zip file) to  IBM Clinical Data Annotator using ",(0,n.kt)("em",{parentName:"li"},"POST /v1/deploy")," API. In the following curl example, the consumer’s cartridge file is ",(0,n.kt)("inlineCode",{parentName:"li"},"./my_cartridges/name_of_cartridge_file.zip"),", and ",(0,n.kt)("inlineCode",{parentName:"li"},"update=false")," means do not update the resource if it already exists. Specifying the ",(0,n.kt)("strong",{parentName:"li"},"update=true")," parameter on the deploy API to update an existing cartridge.")),(0,n.kt)("p",null,"A successful cartridge deploy will result in ",(0,n.kt)("q",null,"201 Created")," if it is a new resource, or ",(0,n.kt)("q",null,"200 OK")," if ",(0,n.kt)("inlineCode",{parentName:"p"},"update=true")," was specified and the existing resource was updated."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-Curl"},'curl -X POST --header "Authorization: Bearer xxxxxxxxxxxxxxx" \\\n--header “Content-Type: application/octet-stream” \\\n--header "Accept: application/json" \\\n--data-binary @./my_cartridges/name_of_cartridge_file.zip \\\n"<route_host>/v1/deploy?update=false&version=2018-01-17"\n')),(0,n.kt)("p",null,"Some large cartridge deployments can exceed the request timeout thresholds defined in the data center gateways (usually after 2 mins). See ",(0,n.kt)("a",{parentName:"p",href:"/acd-containers/clouddocs/known_limitations/#cartridge-deployment-timeouts"},"Cartridge Deployment Timeout")," for additional considerations during the deployment of large cartridges."))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-clouddocs-customizing-md-0a21a755c86f483a694f.js.map